package com.squidder.flar {	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Sprite;	import flash.events.Event;		import org.libspark.flartoolkit.core.transmat.FLARTransMatResult;	import org.libspark.flartoolkit.pv3d.FLARBaseNode;	import org.libspark.flartoolkit.pv3d.FLARCamera3D;	import org.papervision3d.core.math.Matrix3D;	import org.papervision3d.objects.DisplayObject3D;	import org.papervision3d.render.BasicRenderEngine;	import org.papervision3d.scenes.Scene3D;	import org.papervision3d.view.Viewport3D;		/**	 * @author Jon Reiling	 */	public class PVFLARBaseApplication extends FLARBaseApplication {		public var pvscene : Scene3D;		public var viewport : Viewport3D;		public var pvrenderer : BasicRenderEngine;		protected var _camera : FLARCamera3D;		protected var _height : Number;		protected var _width : Number;		protected var _baseNode : FLARBaseNode;		protected var _resultMat : FLARTransMatResult;		protected var _resultsArray : Array;				[Embed(source="../bin/flars/C30.png")]		private var DEFAULT_PAT:Class;		protected var fakeBitmap:Bitmap = Bitmap(new DEFAULT_PAT()); 		//private var fakeBitmapData:BitmapData;// = Bitmap(new DEFAULT_PAT()).bitmapData; 				public function PVFLARBaseApplication() {			super( );		}		override protected function _init( event : Event ) : void {						super._init( event );							pvscene = new Scene3D( );			viewport = new Viewport3D( stage.width , stage.height , false , false );			addChild( viewport );			pvrenderer = new BasicRenderEngine( );								_baseNode = new FLARBaseNode();						pvscene.addChild( _baseNode );						_resultMat = new FLARTransMatResult();			_camera = new FLARCamera3D( _flarParam );						startRendering();						_container = new Sprite();			addChild(_container);						var bgBitmap:Bitmap = new Bitmap(new BitmapData(200,200,false,0xFFFFFF));			_container.addChild(bgBitmap);						fakeBitmap.x = 50;			fakeBitmap.y = 50;			fakeBitmap.z = 200;			_container.addChild(fakeBitmap);						bgBitmap.visible = false;			fakeBitmap.visible = false;		}				private var _container:Sprite;						public function startRendering() : void {						addEventListener( Event.ENTER_FRAME , _onRenderTick );		}				protected function _detectMarkers() : void {						_resultsArray = _flarDetector.updateMarkerPosition( _flarRaster , 80, .5 );		}				protected function _onRenderTick( event : Event = null ) : void {			if(_video)				_flarBitmap.bitmapData.draw( _video );			else				_flarBitmap.bitmapData.draw( _container );						_detectMarkers();						pvrenderer.renderScene( pvscene , _camera , viewport );		}				protected function transformMatrix( target : DisplayObject3D , r:FLARTransMatResult):void {			var m:Matrix3D = target.transform;						m.n11 =  r.m01; m.n12 =  r.m00; m.n13 =  r.m02; m.n14 =  r.m03;			m.n21 = -r.m11; m.n22 = -r.m10; m.n23 = -r.m12; m.n24 = -r.m13;			m.n31 =  r.m21; m.n32 =  r.m20; m.n33 =  r.m22; m.n34 =  r.m23;		}				protected function transformMatrixLite(r:FLARTransMatResult):Vector.<Number> {			return Vector.<Number>([				 r.m01, r.m11,  r.m21, 0,				-r.m00, -r.m10, -r.m20, 0,				 r.m02, r.m12,  r.m22, 0,				 r.m03, r.m13,  r.m23, 1			]);		}		}}