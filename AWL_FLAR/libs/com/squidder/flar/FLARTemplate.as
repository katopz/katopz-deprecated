package com.squidder.flar{	import away3dlite.arcane;	import away3dlite.core.clip.*;	import away3dlite.core.render.*;	import away3dlite.templates.Template;	import com.squidder.base.baseLoader.BaseLoader;	import com.squidder.flar.detector.FLARSquidderMarkerDetector;	import com.squidder.flar.events.FLARDetectorEvent;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.PixelSnapping;	import flash.events.Event;	import flash.geom.Matrix;	import flash.media.Camera;	import flash.media.Video;	import org.libspark.flartoolkit.core.FLARCode;	import org.libspark.flartoolkit.core.param.FLARParam;	import org.libspark.flartoolkit.core.raster.rgb.FLARRgbRaster_BitmapData;	import org.libspark.flartoolkit.core.transmat.FLARTransMatResult;	import org.libspark.flartoolkit.support.away3dlite.FLARCamera3D;	use namespace arcane;	public class FLARTemplate extends Template	{		protected var _flarParam:FLARParam;		protected var _flarCodes:Array;		protected var _flarRaster:FLARRgbRaster_BitmapData;		protected var _flarDetector:FLARSquidderMarkerDetector;		protected var _webcam:Camera;		protected var _video:Video;		protected var _flarBitmap:Bitmap;		protected var _markers:Array;		protected var _sizes:Array;		protected var _baseLoader:BaseLoader;		protected var _width:Number = 320;		protected var _height:Number = 240;		protected var _camera:FLARCamera3D;		protected var _resultMat:FLARTransMatResult;		protected var _resultsArray:Array;		protected var _drawMatrix:Matrix = new Matrix();		public function get flarParam():FLARParam		{			return _flarParam;		}		public function FLARTemplate()		{			_flarBitmap = new Bitmap(new BitmapData(_width, _height, false, 0), PixelSnapping.AUTO, true);			_flarBitmap.scaleX = _flarBitmap.scaleY = 2;			addChild(_flarBitmap);			// flip			//_drawMatrix = new Matrix(-1, 0, 0, 1, _flarBitmap.width, 0);			super();			_loadMarkersAndCamera();		}		/** @private */		arcane override function init():void		{			super.init();			view.renderer = renderer;			view.clipping = clipping || new RectangleClipping();		}		/**		 * The renderer object used in the template.		 */		public var renderer:BasicRenderer = new BasicRenderer();		/**		 * The clipping object used in the template.		 */		public var clipping:Clipping;		protected function _loadMarkersAndCamera():void		{			_baseLoader = new BaseLoader();			_baseLoader.addAsset("flars/camera.dat", {id: "FLARCamera", type: "Binary"});			for (var i:int = 0; i < _markers.length; i++)			{				var markerObj:FLARMarkerObj = FLARMarkerObj(_markers[i]);				_baseLoader.addAsset(markerObj.markerSrc, {id: "FLARPattern" + i});			}			_baseLoader.addEventListener(Event.COMPLETE, _init);			_baseLoader.load();		}		protected function _init(event:Event):void		{			_flarParam = new FLARParam();			_flarParam.loadARParam(_baseLoader.getAsset("FLARCamera"));			_flarParam.changeScreenSize(_width, _height);			_setUpMarkers();			_attachWebCam();			_flarRaster = new FLARRgbRaster_BitmapData(_flarBitmap.bitmapData);			_flarDetector = new FLARSquidderMarkerDetector(_flarParam, _flarCodes, _sizes, _sizes.length);			_flarDetector.addEventListener(FLARDetectorEvent.MARKER_ADDED, _handleMarkerAdded);			_flarDetector.addEventListener(FLARDetectorEvent.MARKER_REMOVED, _handleMarkerRemove);			_resultMat = new FLARTransMatResult();		}		protected function _setUpMarkers():void		{			_sizes = new Array();			_flarCodes = new Array();			for (var i:int = 0; i < _markers.length; i++)			{				var markerObj:FLARMarkerObj = FLARMarkerObj(_markers[i]);				var code:FLARCode = new FLARCode(markerObj.markerSegements, markerObj.markerSegements, markerObj.markerSize, markerObj.markerSize);				code.loadARPatt(_baseLoader.getAsset("FLARPattern" + i));				_flarCodes.push(code);				_sizes.push(markerObj.markerWidth);			}		}		protected function _attachWebCam():void		{			var index:int = 0;			//auto switch to built in camera on a mac.			for (var i:int = 0; i < Camera.names.length; i++)			{				if (Camera.names[i] == "USB Video Class Video")				{					index = i;				}			}			_webcam = Camera.getCamera(String(index));			if (_webcam)			{				_webcam.setMode(_width, _height, 30);				_video = new Video(_width, _height);				_video.attachCamera(_webcam);			}		}		protected function transformMatrix(r:FLARTransMatResult):Vector.<Number>		{			return Vector.<Number>([				r.m01, r.m11, r.m21, 0,				-r.m00, -r.m10, -r.m20, 0,				r.m02, r.m12, r.m22, 0,				r.m03, r.m13, r.m23, 1				]);		}		override protected function onPreRender():void		{			if (_video)				_flarBitmap.bitmapData.draw(_video, _drawMatrix);			if (_flarDetector)				_resultsArray = _flarDetector.updateMarkerPosition(_flarRaster, 80, .5);			onMarkersDetect();		}		protected function onMarkersDetect():void		{			// override me		}		protected function _handleMarkerAdded(event:FLARDetectorEvent):void		{			// override me		}		protected function _handleMarkerRemove(event:FLARDetectorEvent):void		{			// override me		}	}}