package hype.extended.behavior {	import hype.framework.behavior.AbstractBehavior;	import hype.framework.behavior.IBehavior;	import hype.framework.core.HypeMath;	/**	 * Vibrates a property in an directional manner	 */	public class DirectionalVibration extends AbstractBehavior implements IBehavior {		private var _prop:String;		private var _spring:Number;		private var _ease:Number;		private var _min:Number;		private var _range:Number; 		private var _speed:Number;		/**		 * Constructor		 * 		 * @param target Target object		 * @param prop Target property		 * @param spring Springiness of the vibration		 * @param ease Ease of the vibration		 * @param min Minimum range of the vibration		 * @param max Maximum range of the vibration		 */		public function DirectionalVibration(target:Object, prop:String, spring:Number, ease:Number, min:Number, max:Number) {			super(target);						_range = max - min;			_prop = prop;			_spring = spring;			_ease = ease;			_min = min;			_speed = 0;		}		/**		 * @private		 */		public function run(target:Object):void {			var goal:Number;			var value:Number = getProperty(_prop);						goal = value + (_min + (Math.random() * _range));			_speed = (_speed * _spring) + HypeMath.getDistance(_prop, value, goal) * _ease;			setProperty(_prop, value + _speed);		}	}}