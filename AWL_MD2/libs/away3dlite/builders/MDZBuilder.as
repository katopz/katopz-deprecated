package away3dlite.builders{	import away3dlite.animators.MovieMesh;	import away3dlite.arcane;	import away3dlite.loaders.data.MaterialData;	import away3dlite.materials.BitmapMaterial;		import flash.utils.Dictionary;		import mx.graphics.codec.PNGEncoder;		import nochump.util.zip.ZipEntry;	import nochump.util.zip.ZipOutput;

	use namespace arcane;	/**	 * MDZBuilder : Multi MD2 in 1 file zip format as MDZ	 * @author katopz	 */	public class MDZBuilder extends MD2Builder	{		public function MDZBuilder()		{			super();		}		public function getMDZ(meshes:Vector.<MovieMesh>):ZipOutput		{			var _mdz:ZipOutput = new ZipOutput();			var _pngEncoder:PNGEncoder = new PNGEncoder();			var _mesh:MovieMesh;			var _materials:Dictionary = new Dictionary(true);			var _name:String;			// write all material as png			for each (var _materialData:MaterialData in _materialLibrary)				if (_materialData.textureBitmap)				{					_mdz.putNextEntry(new ZipEntry(_materialData.name + ".png"));					_mdz.write(_pngEncoder.encode(_materialData.textureBitmap));					_mdz.closeEntry();										_materials[_materialData.name] = _materialData.textureBitmap;				}						// md2			for each (_mesh in meshes)			{				if (_mesh.material is BitmapMaterial)				{					for (_name in _materials)						if(_materials[_name] == BitmapMaterial(_mesh.material).bitmapData)							BitmapMaterial(_mesh.material).name = _name;				}								_mdz.putNextEntry(new ZipEntry(_mesh.name + ".md2"));				_mdz.write(getMD2(_mesh));				_mdz.closeEntry();			}						_mdz.finish();			// gc			_materials = null;			return _mdz;		}	}}