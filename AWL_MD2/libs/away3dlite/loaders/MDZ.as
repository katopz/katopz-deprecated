package away3dlite.loaders{	import away3dlite.animators.MovieMesh;	import away3dlite.animators.MovieMeshContainer3D;	import away3dlite.arcane;	import away3dlite.containers.ObjectContainer3D;	import away3dlite.events.Loader3DEvent;	import away3dlite.events.ParserEvent;	import away3dlite.loaders.AbstractParser;	import away3dlite.loaders.MD2;	import away3dlite.materials.BitmapFileMaterial;		import flash.utils.ByteArray;		import nochump.util.zip.ZipEntry;	import nochump.util.zip.ZipFile;
		use namespace arcane;	public class MDZ extends AbstractParser	{		public var meshes:Vector.<MovieMesh>;				/** @private */		arcane override function prepareData(data:*):void		{			var zipFile:ZipFile = new ZipFile(data);			for(var i:int = 0; i < zipFile.entries.length; i++) 			{				var entry:ZipEntry = zipFile.entries[i];				trace(entry.name);								var _md2ByteArray:ByteArray = zipFile.getInput(entry);				trace(_md2ByteArray.length);								var _md2:MD2 = new MD2();				_md2.scaling = scaling;				//_md2.material = new BitmapFileMaterial("nemuvine/chair.png");				_md2.addOnSuccess(onSuccess);				_md2.parseGeometry(_md2ByteArray);			}		}				private function onSuccess(event:ParserEvent):void		{			var model:MovieMesh = event.result as MovieMesh;			model.bothsides = bothsides;			model.play();						if(!meshes)				meshes = new Vector.<MovieMesh>();						meshes.fixed = false;			meshes.push(model);			meshes.fixed = true;						trace("addChild:"+model);						_container.addChild(model);		}				public var bothsides:Boolean = false;				/**		 * A scaling factor for all geometry in the model. Defaults to 1.		 */		public var scaling:Number = 1;				/**		 * Controls the automatic centering of geometry data in the model, improving culling and the accuracy of bounding dimension values.		 */		public var centerMeshes:Boolean;				/**		 * Creates a new <code>MD2</code> object.		 */		public function MDZ()		{			_container = new MovieMeshContainer3D();			binary = true;		}	}}