package away3dlite.loaders{	import away3dlite.animators.*;	import away3dlite.animators.frames.Frame;	import away3dlite.arcane;	import away3dlite.containers.ObjectContainer3D;	import away3dlite.core.base.Mesh;	import away3dlite.core.base.Object3D;	use namespace arcane;	public class MD2Builder extends MD2	{		private var mesh:MovieMesh;		/** @private */		arcane function convertSkin(object3D:Object3D):void		{			mesh._vertices.fixed = false;			mesh._uvtData.fixed = false;			mesh._indices.fixed = false;			mesh._faceLengths.fixed = false;			var _bonesAnimator:BonesAnimator = object3D.animationLibrary.getAnimation("default").animation as BonesAnimator;			_bonesAnimator.update(0);			var _inputMesh:Mesh = ObjectContainer3D(object3D).children[0] as Mesh;			mesh._vertices.length = _inputMesh._vertices.length;			mesh._uvtData.length = _inputMesh._uvtData.length;			mesh._indices.length = _inputMesh._indices.length;			mesh._faceLengths.length = _inputMesh._faceLengths.length;			var i:int = _inputMesh._vertices.length;			while (i--)				mesh._vertices[i] = _inputMesh._vertices[i];			i = _inputMesh._uvtData.length;			while (i--)				mesh._uvtData[i] = _inputMesh._uvtData[i];			i = _inputMesh._indices.length;			while (i--)				mesh._indices[i] = _inputMesh._indices[i];			i = _inputMesh._faceLengths.length;			while (i--)				mesh._faceLengths[i] = _inputMesh._faceLengths[i];			convertFrames(_inputMesh, _bonesAnimator);			// material			if (_inputMesh.material)				mesh.material = _inputMesh.material;			// build			mesh.buildFaces();		}		private function convertFrames(_inputMesh:Mesh, _bonesAnimator:BonesAnimator):void		{			var _length:Number = _bonesAnimator.length;			var num_frames:int = _length*30;			var i:int;			for (i = 0; i < num_frames; i++)			{				_bonesAnimator.update((i>0)?num_frames/i:i);				var frame:Frame = new Frame("walk__0", _inputMesh._vertices.concat());				mesh.addFrame(frame);			}		}		public function MD2Builder(object3D:Object3D)		{			// TODO : multi mesh			mesh = (_container = new MovieMesh()) as MovieMesh;			convertSkin(object3D);			binary = true;		}	}}